// src/middleware.ts

import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import knex from 'knex';
import knexConfig from './knexfile';

const JWT_SECRET = process.env.SECRET_KEY as string;
const db = knex(knexConfig.development);

export class AuthMiddleware {
    static verifyToken(req: Request, res: Response, next: NextFunction) {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Unauthorized: No token provided' });
        }

        jwt.verify(token, JWT_SECRET, (err, decoded) => {
            if (err) {
                console.error('Error verifying token:', err);
                return res.status(401).json({ error: 'Unauthorized: Invalid token' });
            }
            (req as any).user = decoded;
            next();
        });
    }
}

export class AuthUtils {
    static async generateToken(user: { id: number; username: string }) {
        const token = jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, {
            expiresIn: '1h'
        });
        return token;
    }

    static async hashPassword(password: string) {
        const hashedPassword = await bcrypt.hash(password, 10);
        return hashedPassword;
    }
}

export { db };
